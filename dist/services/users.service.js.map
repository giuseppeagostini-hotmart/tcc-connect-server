{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\nimport userModel from '@models/users.model';\nimport { isEmpty } from '@utils/util';\n\nclass UserService {\n  public users = userModel;\n\n  public async findAllUser(): Promise<User[]> {\n    const users: User[] = await this.users.find();\n    return users;\n  }\n\n  public async findUserById(userId: string): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, 'UserId is empty');\n\n    const findUser: User = await this.users.findOne({ _id: userId });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = await this.users.findOne({ email: userData.email });\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await this.users.create({ ...userData, password: hashedPassword });\n\n    return createUserData;\n  }\n\n  public async updateUser(userId: string, userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    if (userData.email) {\n      const findUser: User = await this.users.findOne({ email: userData.email });\n      if (findUser && findUser._id != userId) throw new HttpException(409, `This email ${userData.email} already exists`);\n    }\n\n    if (userData.password) {\n      const hashedPassword = await hash(userData.password, 10);\n      userData = { ...userData, password: hashedPassword };\n    }\n\n    const updateUserById: User = await this.users.findByIdAndUpdate(userId, { userData });\n    if (!updateUserById) throw new HttpException(409, \"User doesn't exist\");\n\n    return updateUserById;\n  }\n\n  public async deleteUser(userId: string): Promise<User> {\n    const deleteUserById: User = await this.users.findByIdAndDelete(userId);\n    if (!deleteUserById) throw new HttpException(409, \"User doesn't exist\");\n\n    return deleteUserById;\n  }\n}\n\nexport default UserService;\n"],"names":["hash","HttpException","userModel","isEmpty","UserService","users","findAllUser","find","findUserById","userId","findUser","findOne","_id","createUser","userData","hashedPassword","createUserData","email","password","create","updateUser","updateUserById","findByIdAndUpdate","deleteUser","deleteUserById","findByIdAndDelete"],"mappings":"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"}