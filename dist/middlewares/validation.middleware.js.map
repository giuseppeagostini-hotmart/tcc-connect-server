{"version":3,"sources":["../../src/middlewares/validation.middleware.ts"],"sourcesContent":["import { plainToClass } from 'class-transformer';\nimport { validate, ValidationError } from 'class-validator';\nimport { RequestHandler } from 'express';\nimport { HttpException } from '@exceptions/HttpException';\n\nconst validationMiddleware = (\n  type: any,\n  value: string | 'body' | 'query' | 'params' = 'body',\n  skipMissingProperties = false,\n  whitelist = true,\n  forbidNonWhitelisted = true,\n): RequestHandler => {\n  return (req, res, next) => {\n    validate(plainToClass(type, req[value]), { skipMissingProperties, whitelist, forbidNonWhitelisted }).then((errors: ValidationError[]) => {\n      if (errors.length > 0) {\n        const message = errors.map((error: ValidationError) => Object.values(error.constraints)).join(', ');\n        next(new HttpException(400, message));\n      } else {\n        next();\n      }\n    });\n  };\n};\n\nexport default validationMiddleware;\n"],"names":["plainToClass","validate","HttpException","validationMiddleware","type","value","skipMissingProperties","whitelist","forbidNonWhitelisted","req","res","next","then","errors","length","message","map","error","Object","values","constraints","join"],"mappings":"AAAA,SAASA,YAAY,QAAQ,oBAAoB;AACjD,SAASC,QAAQ,QAAyB,kBAAkB;AAE5D,SAASC,aAAa,QAAQ,4BAA4B;AAE1D,IAAMC,uBAAuB,SAC3BC;QACAC,yEAA8C,QAC9CC,yFAAwB,OACxBC,6EAAY,MACZC,wFAAuB;IAEvB,OAAO,SAACC,KAAKC,KAAKC;QAChBV,SAASD,aAAaI,MAAMK,GAAG,CAACJ,MAAM,GAAG;YAAEC,uBAAAA;YAAuBC,WAAAA;YAAWC,sBAAAA;QAAqB,GAAGI,IAAI,CAAC,SAACC;YACzG,IAAIA,OAAOC,MAAM,GAAG,GAAG;gBACrB,IAAMC,UAAUF,OAAOG,GAAG,CAAC,SAACC;2BAA2BC,OAAOC,MAAM,CAACF,MAAMG,WAAW;mBAAGC,IAAI,CAAC;gBAC9FV,KAAK,IAAIT,cAAc,KAAKa;YAC9B,OAAO;gBACLJ;YACF;QACF;IACF;AACF;AAEA,eAAeR,qBAAqB"}