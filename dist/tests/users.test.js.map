{"version":3,"sources":["../../src/tests/users.test.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\nimport mongoose from 'mongoose';\nimport request from 'supertest';\nimport App from '@/app';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport UsersRoute from '@routes/users.route';\n\nafterAll(async () => {\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n});\n\ndescribe('Testing Users', () => {\n  describe('[GET] /users', () => {\n    it('response fineAll Users', async () => {\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.find = jest.fn().mockReturnValue([\n        {\n          _id: 'qpwoeiruty',\n          email: 'a@email.com',\n          password: await bcrypt.hash('q1w2e3r4!', 10),\n        },\n        {\n          _id: 'alskdjfhg',\n          email: 'b@email.com',\n          password: await bcrypt.hash('a1s2d3f4!', 10),\n        },\n        {\n          _id: 'zmxncbv',\n          email: 'c@email.com',\n          password: await bcrypt.hash('z1x2c3v4!', 10),\n        },\n      ]);\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}`).expect(200);\n    });\n  });\n\n  describe('[GET] /users/:id', () => {\n    it('response findOne User', async () => {\n      const userId = 'qpwoeiruty';\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findOne = jest.fn().mockReturnValue({\n        _id: 'qpwoeiruty',\n        email: 'a@email.com',\n        password: await bcrypt.hash('q1w2e3r4!', 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}/${userId}`).expect(200);\n    });\n  });\n\n  describe('[POST] /users', () => {\n    it('response Create User', async () => {\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findOne = jest.fn().mockReturnValue(null);\n      users.create = jest.fn().mockReturnValue({\n        _id: '60706478aad6c9ad19a31c84',\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).post(`${usersRoute.path}`).send(userData).expect(201);\n    });\n  });\n\n  describe('[PUT] /users/:id', () => {\n    it('response Update User', async () => {\n      const userId = '60706478aad6c9ad19a31c84';\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      if (userData.email) {\n        users.findOne = jest.fn().mockReturnValue({\n          _id: userId,\n          email: userData.email,\n          password: await bcrypt.hash(userData.password, 10),\n        });\n      }\n\n      users.findByIdAndUpdate = jest.fn().mockReturnValue({\n        _id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).put(`${usersRoute.path}/${userId}`).send(userData);\n    });\n  });\n\n  describe('[DELETE] /users/:id', () => {\n    it('response Delete User', async () => {\n      const userId = '60706478aad6c9ad19a31c84';\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findByIdAndDelete = jest.fn().mockReturnValue({\n        _id: '60706478aad6c9ad19a31c84',\n        email: 'test@email.com',\n        password: await bcrypt.hash('q1w2e3r4!', 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).delete(`${usersRoute.path}/${userId}`).expect(200);\n    });\n  });\n});\n"],"names":["bcrypt","mongoose","request","App","UsersRoute","afterAll","Promise","resolve","setTimeout","describe","it","usersRoute","users","app","usersController","userService","jest","fn","mockReturnValue","_id","email","hash","password","find","connect","getServer","get","path","expect","userId","findOne","userData","create","post","send","findByIdAndUpdate","put","findByIdAndDelete","delete"],"mappings":"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"}