{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport hpp from 'hpp';\nimport { ConnectOptions, connect, set } from 'mongoose';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-express';\nimport { NODE_ENV, PORT } from '@config';\nimport { dbConnection } from '@databases';\nimport { Routes } from '@interfaces/routes.interface';\nimport errorMiddleware from '@middlewares/error.middleware';\nimport { logger } from '@utils/logger';\n\nclass App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || 'development';\n    this.port = PORT || 3000;\n\n    this.connectToDatabase();\n    this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    this.initializeSwagger();\n    this.initializeErrorHandling();\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(`=================================`);\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n      logger.info(`=================================`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private async connectToDatabase() {\n    if (this.env !== 'production') {\n      set('debug', true);\n    }\n    try {\n      set('strictQuery', true);\n      await connect(dbConnection.url, dbConnection.options as ConnectOptions);\n      console.log('conectado');\n    } catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  private initializeMiddlewares() {\n    this.app.use(cors());\n    this.app.use(hpp());\n    this.app.use(helmet());\n    this.app.use(compression());\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n    routes.forEach(route => {\n      this.app.use('/', route.router);\n    });\n  }\n\n  private initializeSwagger() {\n    const options = {\n      swaggerDefinition: {\n        info: {\n          title: 'REST API',\n          version: '1.0.0',\n          description: 'Example docs',\n        },\n      },\n      apis: ['swagger.yaml'],\n    };\n\n    const specs = swaggerJSDoc(options);\n    this.app.use('/swagger', swaggerUi.serve, swaggerUi.setup(specs));\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(errorMiddleware);\n  }\n}\n\nexport default App;\n"],"names":["compression","cookieParser","cors","express","helmet","hpp","connect","set","swaggerJSDoc","swaggerUi","NODE_ENV","PORT","dbConnection","errorMiddleware","logger","App","routes","app","env","port","connectToDatabase","initializeMiddlewares","initializeRoutes","initializeSwagger","initializeErrorHandling","listen","info","getServer","error","url","options","console","log","use","json","urlencoded","extended","forEach","route","router","swaggerDefinition","title","version","description","apis","specs","serve","setup"],"mappings":"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"}