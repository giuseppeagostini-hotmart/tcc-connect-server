tags:
  - name: users
    description: users API

paths:
  # [GET] users
  /users:
    get:
      tags:
        - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    # [POST] users
    post:
      tags:
        - users
      summary: Add User
      parameters:
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] users/id
  /users/{id}:
    get:
      tags:
        - users
      summary: Find User By Id
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] users/id
    put:
      tags:
        - users
      summary: Update User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] users/id
    delete:
      tags:
        - users
      summary: Delete User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [POST] /login
  /login:
    post:
      tags:
        - auth
      summary: Login Endpoint
      parameters:
        - name: body
          in: body
          description: login Endpoint
          required: true
          schema:
            $ref: '#/definitions/login'
      responses:
        201:
          description: 'Login Success'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'
  # [POST] /logout
  /logout:
    get:
      tags:
        - auth
      summary: Logout Endpoint
      responses:
        201:
          description: 'Logout Success'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

/signup:
  post:
    tags:
      - auth
    summary: Signup Endpoint
    parameters:
      - name: body
        in: body
        description: Signup Endpoint
        required: true
        schema:
          $ref: '#/definitions/signup'
    responses:
      201:
        description: 'Signup Success'
      400:
        description: 'Bad Request'
      500:
        description: 'Server Error'

/isLogged:
  get:
    tags:
      - auth
    summary: Logged Endpoint
    responses:
      201:
        description: 'Logged Success'
      400:
        description: 'Bad Request'
      500:
        description: 'Server Error'
# definitions
definitions:
  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
  login:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

  signup:
    type: object
    required:
      - email
      - password
  properties:
    email:
      type: string
      description: user Email
    password:
      type: string
      description: user Password

schemes:
  - https
  - http
